import java.util.*;
/*
 * Imagine a robot sitting on the upper left corner of an X by Y grid. The robot can only move in 2 directions right and down. 
 * How many possible paths are there for the robot to go from (0,0) to (X,Y)
 * Imagine certain paths are off limits. Design and algorithm to find a path for the robot from the top left to the bottom right
 */
public class GetPath {
	
	int[][] grid;
	ArrayList<Point> path;
	
	class Point{
		int x;
		int y;
		
		public Point(int x, int y){
			this.x = x;
			this.y = y;
		}
	}
	
	public GetPath(){
		grid = new int[4][4];
		path = new ArrayList<Point>();
		
	}
	
	public boolean isFree(int x, int y){
		if(grid[x][y] == -1)
			return false;
		else
			return true;
	}
	
	public boolean getpath(int x, int y, ArrayList<Point> path){
		if(x<0 || y<0 || !isFree(x,y))
			return false;
		
		if(x == 0 && y == 0)
			return true;
					
		Point p = new Point(x,y);
		path.add(p);
		return (getpath(x, y-1, path) || getpath(x-1, y, path));
		
	}
	
	public static void main(String[] args) {
		GetPath g = new GetPath();
			
	}

}
