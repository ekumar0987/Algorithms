import java.util.*;
/*
 * Imagine a robot sitting on the upper left corner of an X by Y grid. The robot can only move in 2 directions right and down. 
 * How many possible paths are there for the robot to go from (0,0) to (X,Y)
 * Imagine certain paths are off limits. Design and algorithm to find a path for the robot from the top left to the bottom right
 */
public class GetPath {
	
	int[][] grid;
	
	class Point{
		int x;
		int y;
		
		public Point(int x, int y){
			this.x = x;
			this.y = y;
		}
	}
	
	public boolean isFree(int x, int y){
		if(grid[x][y] == -1)
			return false;
		else
			return true;
	}
	
	public void getpath(int x, int y, ArrayList<Point> path){
		
	}
	
	public static void main(String[] args) {

	}

}
