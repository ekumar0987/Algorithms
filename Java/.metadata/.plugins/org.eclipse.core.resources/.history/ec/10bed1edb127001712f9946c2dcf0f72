import java.util.*;
/*
 * Imagine a robot sitting on the upper left corner of an X by Y grid. The robot can only move in 2 directions right and down. 
 * How many possible paths are there for the robot to go from (0,0) to (X,Y)
 * Imagine certain paths are off limits. Design and algorithm to find a path for the robot from the top left to the bottom right
 * 
 * Example Grid - 
 * 
 * 		 0	 1	 2	 3
 * 		 -------------
 * 	0	|0	 0	 0 	 0
 * 	1	|0	-1	-1	 0
 * 	2	|0	-1	 0	 0
 * 	3	|-1	 0	 0	 0
 * 
 * -1 are off limits
 * 
 * It keeps going left and then back traces because (3,0) is -1 and then finds an alternate path
 * 
 * Path: (3,3) > (2,3) > (1,3) > (0,3) > (0,2) > (0,1) > (0,0)
 */
public class GetPath {
	
	int[][] grid;
	// inner class
	class Point{
		int x;
		int y;
		
		public Point(int x, int y){
			this.x = x;
			this.y = y;
		}
		
		public void print(){
			System.out.println("Printing point:("+x+","+y+")");
		}
	}
	
	// constructor
	public GetPath(){
		grid = new int[4][4];
		
		// Setting cells that are off limits
		grid[1][1] = -1;
		grid[1][2] = -1;
		grid[2][1] = -1;
		grid[3][0] = -1;
	}
	
	// helper method
	public boolean isFree(int x, int y){
		if(grid[x][y] == -1)
			return false;
		else
			return true;
	}
	
	/*
	 *  Time Complexity:2^(X+Y) (Exponential)
	 */
	public boolean getpath(int x, int y, ArrayList<Point> path){
		// out of bounds, return false
		if(x<0 || y<0 || !isFree(x,y))
			return false;
		
		// reached the origin, return true
		if(x == 0 && y == 0)
			return true;
		
		// Is there a path to any of the adjacent cells. These recursive calls will eventually lead to the 2 basic conditions
		// true (for the origin) or false(out of bounds)
		if (getpath(x, y-1, path) || getpath(x-1, y, path)){
			Point p = new Point(x,y);
			path.add(p);
			return true;
		}
		return false;
	}
	
	/*
	 * Time Complexity: O(XY) 
	 */
	public boolean getpathDP(int x, int y, ArrayList<Point> path, HashMap<Point, Boolean> cache){
		// out of bounds, return false
		if(x<0 || y<0 || !isFree(x,y))
			return false;
		
		// reached the origin, return true
		if(x == 0 && y == 0)
			return true;
		
		Point p = new Point(x,y);
		boolean pathexists = false;
		
		if(cache.containsKey(p))
			return cache.get(p);
		
		// Is there a path to any of the adjacent cells. These recursive calls will eventually lead to the 2 basic conditions
		// true (for the origin) or false(out of bounds)
		if (getpath(x, y-1, path) || getpath(x-1, y, path)){
			path.add(p);
			pathexists = true;
		}
		
		cache.put(p, pathexists);
		return pathexists;
	}
	
	
	public static void main(String[] args) {
		GetPath g = new GetPath();
		ArrayList<Point> path = new ArrayList<Point>();
		boolean pathExists = g.getpath(3, 3, path);			//4x4 grid, indices go up to 3
		if(pathExists){
			for(int i=0; i<path.size();i++){
				path.get(i).print();
				System.out.println();
			}
		}
		else
			System.out.println("No paths exists");
			
	}

}
