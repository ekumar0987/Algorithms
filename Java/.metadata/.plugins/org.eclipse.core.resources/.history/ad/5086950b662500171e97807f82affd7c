package datastructures;

public class BinarySearchTrees {

	Node root;
	
	public BinarySearchTrees(){
		root = null;
	}
	
	public Node insert(int item, Node n){
		
		if(n == null){
			Node newnode = new Node(item);
			
			if(root == null)
				root = newnode;
			
			return newnode;
		}
		
		Node curr = n;
		if(curr.data == item){
			System.out.println("Duplicate Entry");
			return null;
		}
		else if(curr.data < item)
			curr.right = insert(item, curr.right);
		else if(curr.data > item)
			curr.left = insert(item, curr.left);
		
		return curr;
	}
	
	public boolean find(int item){
		return false;
	}
	
	public int delete(int item){
		return -1;
	}
	
	
	public class Node{
		
		int data;
		Node left;
		Node right;
		
		public Node(int data){
			this.data = data;
			this.left = null;
			this.right = null;
		}
		
		public int getdata(){
			return this.data;
		}
		
	}
	
	public static String getDotFile(Node rt){
		  StringBuilder sb = new StringBuilder();
		  sb.append("digraph G {\n");
		  sb.append("graph [ dpi = 150 ]\n"); 
		  sb.append("nodesep=0.3;\n");
		  sb.append("ranksep=0.2;\n");
		  sb.append("margin=0.1;\n");
		  sb.append("node [shape=circle];\n");
		  sb.append("edge [arrowsize=0.8];\n");
		  
		  StringBuilder treeContent = getDotTreeContent(new StringBuilder(), rt, 1);
		  sb.append(treeContent);
		  
		  sb.append("}");
		  
		  return sb.toString();
		}

		// Pre: N is not null.
		// This won't work for larger unbalanced trees (int overflow), but then again you probably
		// wouldn't be displaying them anyway, so this is good enough for now.
		private static StringBuilder getDotTreeContent(StringBuilder sb, Node n, int i){
		  sb.append(String.format("node%d [label=\"%d\"];\n", i, n.data));
		  int lChild = 2*i;
		  int rChild = 2*i + 1;
		  
		  if(n.left  != null){
		    sb.append(String.format("node%d -> node%d;\n", i, lChild));
		    getDotTreeContent(sb, n.left, lChild);
		  }
		  if(n.right != null){
		    sb.append(String.format("node%d -> node%d;\n", i, rChild));
		    getDotTreeContent(sb, n.right, rChild);
		  }
		  return sb;
		}
	
	public static void main(String[] args) {
		
		BinarySearchTrees bst = new BinarySearchTrees();
		System.out.println("here");
		bst.insert(1, bst.root);
		System.out.println("and here");
		getDotFile(bst.root);
		System.out.println(bst.root.data);
		
	}

}
