package datastructures;

import java.util.Iterator;

/**
 * Singly Linked List Class (1 of 3)
 * @author Eshitha
 *
 * @param <Anytype>
 */
public class LinkedList<Anytype> implements Iterable<Anytype> {
	
	Node<Anytype> head;
	
	public LinkedList(){
		head = null;
	}
	
	/**
	 * Node Class (2 of 3)
	 * @author Eshitha
	 *
	 * @param <Anytype>
	 */
	private static class Node<Anytype> {
		Anytype data;
		Node<Anytype> next;
		
		public Node(Anytype data){
			this.data = data;
			this.next = null;
		}
	}
	
	/* Iterable interface method - Mandatory */
	public Iterator<Anytype> iterator(){
		return new SinglyLinkedListIterator();
	}
	
	/**
	 * Singly Linked List Iterator Class (3 of 3)
	 * @author Eshitha
	 *
	 */
	private class SinglyLinkedListIterator implements Iterator<Anytype>{
		private Node<Anytype> nextNode;
		
		SinglyLinkedListIterator(){
			nextNode = head;
		}
		
		public boolean hasNext(){
			return nextNode != null;
		}
		
		public Anytype next(){
			if (!hasNext())
				return null;
			
			Anytype result = nextNode.data;
			nextNode = nextNode.next;
			return result;
		}
		
		public void remove(){
			
		}
	}
}
