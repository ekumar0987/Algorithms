import datastructures.BinarySearchTrees;
import datastructures.BinarySearchTrees.Node; 

/*
 * Checks to see if a binary tree is balanced.
 * Brute force: Iterate from root to leaf, at every node get height of left subtree and height of right subtree and check for balance. Problem with this approach O(logn)2
 * Technique: Modify height computation to also check for balance. O(n)
 */
public class isBalanced {
	
	public boolean isBalancedBST(Node n){
		
		if(HeightBalanced(n) < 0)
			return false;
		else
			return true;
		
	}
	
	//Post Order Traversal. Variation of height computation
	public int HeightBalanced(Node n){
		
		if(n == null)
			return 0;
		
		//Process left
		int leftheight = HeightBalanced(n.left);
		if (leftheight == -1)
			return leftheight;
		
		//Process right
		int rightheight = HeightBalanced(n.right);
		if (rightheight == -1)
			return rightheight;
		
		//Process node
		int diff = Math.abs(leftheight - rightheight);
		if(diff > 1)
			return -1;
		else
			return 1 + Math.max(leftheight, rightheight);
	}
	
	public static void main(String[] args) {
		
		BinarySearchTrees bst = new BinarySearchTrees();
		isBalanced b = new isBalanced();
		
		int[] input = {2, 5, 7, 27, 14, 8, 13, 35, 12, 59, 32, 37, 78, 70, 84, 17, 9, 26, 1, 98};
		for(int i : input){
			// inserting into a tree
			bst.insert(i, bst.root);
		}
		
		System.out.println();
		
	}

}
